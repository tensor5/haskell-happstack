Index: haskell-happstack/haskell-happstack-server/src/happstack-server-7.3.9/src/Happstack/Server/Internal/Monads.hs
===================================================================
--- haskell-happstack.orig/haskell-happstack-server/src/happstack-server-7.3.9/src/Happstack/Server/Internal/Monads.hs
+++ haskell-happstack/haskell-happstack-server/src/happstack-server-7.3.9/src/Happstack/Server/Internal/Monads.hs
@@ -27,6 +27,7 @@ import Control.Monad.Trans
 import Control.Monad.Trans.Control               ( MonadTransControl(..)
                                                  , MonadBaseControl(..)
                                                  , ComposeSt, defaultLiftBaseWith, defaultRestoreM
+                                                 , defaultLiftWith, defaultRestoreT
                                                  )
 import Control.Monad.Writer.Class                ( MonadWriter, tell, pass, listens )
 import qualified Control.Monad.Writer.Lazy as Lazy     ( WriterT(WriterT), runWriterT, mapWriterT )
@@ -66,16 +67,16 @@ instance (MonadIO m) => MonadIO (ServerP
     {-# INLINE liftIO #-}
 
 instance MonadTransControl ServerPartT where
-    newtype StT ServerPartT a = StSP {unStSP :: StT WebT (StT (ReaderT Request) a)}
+    type StT ServerPartT a = StT WebT (StT (ReaderT Request) a)
     liftWith f = ServerPartT $ liftWith $ \runReader ->
                                  liftWith $ \runWeb ->
-                                   f $ liftM StSP . runWeb . runReader . unServerPartT
-    restoreT = ServerPartT . restoreT . restoreT . liftM unStSP
+                                   f $ runWeb . runReader . unServerPartT
+    restoreT = ServerPartT . restoreT . restoreT
 
 instance MonadBaseControl b m => MonadBaseControl b (ServerPartT m) where
-    newtype StM (ServerPartT m) a = StMSP {unStMSP :: ComposeSt ServerPartT m a}
-    liftBaseWith = defaultLiftBaseWith StMSP
-    restoreM     = defaultRestoreM     unStMSP
+    type StM (ServerPartT m) a = ComposeSt ServerPartT m a
+    liftBaseWith = defaultLiftBaseWith
+    restoreM     = defaultRestoreM
 
 -- | Particularly useful when combined with 'runWebT' to produce
 -- a @m ('Maybe' 'Response')@ from a 'Request'.
@@ -259,14 +260,14 @@ instance (MonadIO m) => MonadIO (FilterT
     {-# INLINE liftIO #-}
 
 instance MonadTransControl (FilterT a) where
-    newtype StT (FilterT a) b = StFilter {unStFilter :: StT (Lazy.WriterT (FilterFun a)) b}
-    liftWith f = FilterT $ liftWith $ \run -> f $ liftM StFilter . run . unFilterT
-    restoreT = FilterT . restoreT . liftM unStFilter
+    type StT (FilterT a) b = StT (Lazy.WriterT (FilterFun a)) b
+    liftWith = defaultLiftWith FilterT unFilterT
+    restoreT = defaultRestoreT FilterT
 
 instance MonadBaseControl b m => MonadBaseControl b (FilterT a m) where
-    newtype StM (FilterT a m) c = StMFilter {unStMFilter :: ComposeSt (FilterT a) m c}
-    liftBaseWith = defaultLiftBaseWith StMFilter
-    restoreM     = defaultRestoreM     unStMFilter
+    type StM (FilterT a m) c = ComposeSt (FilterT a) m c
+    liftBaseWith = defaultLiftBaseWith
+    restoreM     = defaultRestoreM
 
 -- | A set of functions for manipulating filters.
 --
@@ -312,21 +313,21 @@ instance (MonadIO m) => MonadIO (WebT m)
     {-# INLINE liftIO #-}
 
 instance MonadTransControl WebT where
-    newtype StT WebT a = StWeb {unStWeb :: StT MaybeT
-                                             (StT (FilterT Response)
-                                               (StT (ErrorT Response) a))}
+    type StT WebT a = StT MaybeT
+                           (StT (FilterT Response)
+                             (StT (ErrorT Response) a))
     liftWith f = WebT $ liftWith $ \runError ->
                           liftWith $ \runFilter ->
                             liftWith $ \runMaybe ->
-                              f $ liftM StWeb . runMaybe .
-                                                  runFilter .
-                                                    runError . unWebT
-    restoreT = WebT . restoreT . restoreT . restoreT . liftM unStWeb
+                              f $ runMaybe .
+                                    runFilter .
+                                      runError . unWebT
+    restoreT = WebT . restoreT . restoreT . restoreT
 
 instance MonadBaseControl b m => MonadBaseControl b (WebT m) where
-    newtype StM (WebT m) a = StMWeb {unStMWeb :: ComposeSt WebT m a}
-    liftBaseWith = defaultLiftBaseWith StMWeb
-    restoreM     = defaultRestoreM     unStMWeb
+    type StM (WebT m) a = ComposeSt WebT m a
+    liftBaseWith = defaultLiftBaseWith
+    restoreM     = defaultRestoreM
 
 -- | 'UnWebT' is almost exclusively used with 'mapServerPartT'. If you
 -- are not using 'mapServerPartT' then you do not need to wrap your
