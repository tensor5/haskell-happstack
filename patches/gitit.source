Index: haskell-happstack/haskell-gitit/src/gitit-0.12.0.1/src/Network/Gitit/ContentTransformer.hs
===================================================================
--- haskell-happstack.orig/haskell-gitit/src/gitit-0.12.0.1/src/Network/Gitit/ContentTransformer.hs
+++ haskell-happstack/haskell-gitit/src/gitit-0.12.0.1/src/Network/Gitit/ContentTransformer.hs
@@ -719,10 +719,17 @@ wikiLinksTransform pandoc
 
 -- | Convert links with no URL to wikilinks.
 convertWikiLinks :: Config -> Inline -> Inline
+#if MIN_VERSION_pandoc(1,16,0)
+convertWikiLinks cfg (Link attr ref ("", "")) | useAbsoluteUrls cfg =
+  Link attr ref ("/" </> baseUrl cfg </> inlinesToURL ref, "Go to wiki page")
+convertWikiLinks _cfg (Link attr ref ("", "")) =
+  Link attr ref (inlinesToURL ref, "Go to wiki page")
+#else
 convertWikiLinks cfg (Link ref ("", "")) | useAbsoluteUrls cfg =
   Link ref ("/" </> baseUrl cfg </> inlinesToURL ref, "Go to wiki page")
 convertWikiLinks _cfg (Link ref ("", "")) =
   Link ref (inlinesToURL ref, "Go to wiki page")
+#endif
 convertWikiLinks _cfg x = x
 
 -- | Derives a URL from a list of Pandoc Inline elements.
@@ -745,13 +752,21 @@ inlinesToString = concatMap go
                Cite _ xs               -> concatMap go xs
                Code _ s                -> s
                Space                   -> " "
+#if MIN_VERSION_pandoc(1,16,0)
+               SoftBreak               -> " "
+#endif
                LineBreak               -> " "
                Math DisplayMath s      -> "$$" ++ s ++ "$$"
                Math InlineMath s       -> "$" ++ s ++ "$"
                RawInline (Format "tex") s -> s
                RawInline _ _           -> ""
+#if MIN_VERSION_pandoc(1,16,0)
+               Link _ xs _             -> concatMap go xs
+               Image _ xs _            -> concatMap go xs
+#else
                Link xs _               -> concatMap go xs
                Image xs _              -> concatMap go xs
+#endif
                Note _                  -> ""
                Span _ xs               -> concatMap go xs
 
Index: haskell-happstack/haskell-gitit/src/gitit-0.12.0.1/src/Network/Gitit/Export.hs
===================================================================
--- haskell-happstack.orig/haskell-gitit/src/gitit-0.12.0.1/src/Network/Gitit/Export.hs
+++ haskell-happstack/haskell-gitit/src/gitit-0.12.0.1/src/Network/Gitit/Export.hs
@@ -26,6 +26,7 @@ import qualified Text.Pandoc as Pandoc
 import Text.Pandoc.PDF (makePDF)
 import Text.Pandoc.SelfContained as SelfContained
 import Text.Pandoc.Shared (readDataFileUTF8)
+import qualified Text.Pandoc.UTF8 as UTF8
 import Network.Gitit.Server
 import Network.Gitit.Framework (pathForPage, getWikiBase)
 import Network.Gitit.State (getConfig)
@@ -36,7 +37,6 @@ import Control.Monad (unless)
 import Text.XHtml (noHtml)
 import qualified Data.ByteString as B
 import qualified Data.ByteString.Lazy as L
-import Data.ByteString.Lazy.UTF8 (fromString, toString)
 import System.FilePath ((</>), takeDirectory)
 import Control.Exception (throwIO)
 import System.Directory (doesFileExist)
@@ -80,7 +80,7 @@ respondX templ mimetype ext fn opts page
 respondS :: String -> String -> String -> (WriterOptions -> Pandoc -> String)
           -> WriterOptions -> String -> Pandoc -> Handler
 respondS templ mimetype ext fn =
-  respondX templ mimetype ext (\o d -> return $ fromString $ fn o d)
+  respondX templ mimetype ext (\o d -> return $ UTF8.fromStringLazy $ fn o d)
 
 respondSlides :: String -> HTMLSlideVariant -> String -> Pandoc -> Handler
 respondSlides templ slideVariant page doc = do
@@ -139,7 +139,7 @@ respondSlides templ slideVariant page do
 #endif
     ok . setContentType "text/html;charset=UTF-8" .
       -- (setFilename (page ++ ".html")) .
-      toResponseBS B.empty $ fromString h'
+      toResponseBS B.empty $ UTF8.fromStringLazy h'
 
 respondLaTeX :: String -> Pandoc -> Handler
 respondLaTeX = respondS "latex" "application/x-latex" "tex"
@@ -152,7 +152,7 @@ respondConTeXt = respondS "context" "app
 
 respondRTF :: String -> Pandoc -> Handler
 respondRTF = respondX "rtf" "application/rtf" "rtf"
-  (\o d -> fromString `fmap` writeRTFWithEmbeddedImages o d) defaultRespOptions
+  (\o d -> UTF8.fromStringLazy `fmap` writeRTFWithEmbeddedImages o d) defaultRespOptions
 
 respondRST :: String -> Pandoc -> Handler
 respondRST = respondS "rst" "text/plain; charset=utf-8" ""
@@ -188,9 +188,14 @@ respondOrg :: String -> Pandoc -> Handle
 respondOrg = respondS "org" "text/plain; charset=utf-8" ""
   writeOrg defaultRespOptions
 
+#if MIN_VERSION_pandoc(1,16,0)
 respondICML :: String -> Pandoc -> Handler
+respondICML = respondX "icml" "application/xml; charset=utf-8" ""
+              (\o d -> UTF8.fromStringLazy <$> writeICML o d) defaultRespOptions
+#else
 respondICML = respondS "icml" "application/xml; charset=utf-8" ""
-  writeICML defaultRespOptions
+              writeICML defaultRespOptions
+#endif
 
 respondTextile :: String -> Pandoc -> Handler
 respondTextile = respondS "textile" "text/plain; charset=utf-8" ""
@@ -240,7 +245,7 @@ respondPDF useBeamer page old_pndc = fix
               return res
   case pdf' of
        Left logOutput -> simpleErrorHandler ("PDF creation failed:\n"
-                           ++ toString logOutput)
+                           ++ UTF8.toStringLazy logOutput)
        Right pdfBS -> do
               case cached of
                 Nothing ->
@@ -264,9 +269,15 @@ fixURLs page pndc = do
     let static = staticDir cfg
     let repoPath = repositoryPath cfg
 
+#if MIN_VERSION_pandoc(1,16,0)
+    let go (Image attr ils (url, title)) = do
+           fixedURL <- fixURL url
+           return $ Image attr ils (fixedURL, title)
+#else
     let go (Image ils (url, title)) = do
            fixedURL <- fixURL url
            return $ Image ils (fixedURL, title)
+#endif
         go x                        = return x
 
         fixURL ('/':url) = resolve url
Index: haskell-happstack/haskell-gitit/src/gitit-0.12.0.1/src/Network/Gitit/Feed.hs
===================================================================
--- haskell-happstack.orig/haskell-gitit/src/gitit-0.12.0.1/src/Network/Gitit/Feed.hs
+++ haskell-happstack/haskell-gitit/src/gitit-0.12.0.1/src/Network/Gitit/Feed.hs
@@ -140,8 +140,8 @@ diffLines (Both x _) = map enText x
 
 enTag :: String -> [Content] -> Content
 enTag tag content = Elem blank_element{ elName=blank_name{qName=tag}
-				      , elContent=content
-				      }
+                                      , elContent=content
+                                      }
 enTag1 :: String -> Content -> Content
 enTag1 tag content = enTag tag [content]
 enText :: String -> Content
Index: haskell-happstack/haskell-gitit/src/gitit-0.12.0.1/systemd/gitit@.service
===================================================================
--- /dev/null
+++ haskell-happstack/haskell-gitit/src/gitit-0.12.0.1/systemd/gitit@.service
@@ -0,0 +1,12 @@
+[Unit]
+Description=Gitit wiki
+After=network.target
+
+[Service]
+ExecStart=/usr/bin/gitit -f /etc/gitit/%I.conf
+WorkingDirectory=/srv/gitit/%I
+User=gitit
+Group=gitit
+
+[Install]
+WantedBy=multi-user.target
